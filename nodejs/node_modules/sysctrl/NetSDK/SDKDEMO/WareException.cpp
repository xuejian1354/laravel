#include "stdafx.h"
#include <io.h>
#include <direct.h>
#include "Wareexception.h"

#define CrashExp() ( *((int*)NULL) = 0x12345678 )


static WareException s_exception;

//BEGIN_WARECOMMON

void _se_trans_func( unsigned int, EXCEPTION_POINTERS* )
{
	CrashExp();
}

void terminate_func()
{
	CrashExp();
}

void unexcepted_function()
{
	CrashExp();
}

void _pure_call_handler()
{
	CrashExp();
}

void InvalidParameterHandler( 
	const wchar_t* expression,
	const wchar_t* function,
	const wchar_t* file,
	unsigned int line,
	uintptr_t pReserved )
{
	CrashExp();
}

//Unhandled Exception出现的时候，转向的Callback
LONG WINAPI UnHandledExceptionFilter( struct _EXCEPTION_POINTERS* exceptionInfo ) 
{
	HMODULE DllHandle = NULL;
	//Windows 2000之前，必须另外分配DBGHELP
	//这里使用的是包含在DBGHELP.DLL内的函数，一定要加载
	DllHandle = LoadLibraryA( "DBGHELP.DLL" ); 

	if( DllHandle ) 
	{ 
		//获得Dump创建文件的过程
		//在DBGHELP.DLL内打开MiniDumpWirteDump，定义为Dump
		//利用它创建Dump文件
		MINIDUMPWRITEDUMP Dump = ( MINIDUMPWRITEDUMP )GetProcAddress( DllHandle , "MiniDumpWriteDump" ); 
		if( Dump ) 
		{
			char szDir[MAX_PATH] ={0};
			DWORD dwLen = GetModuleFileName(NULL, szDir, sizeof(szDir));
			while(dwLen - 1 > 0)
			{
				if(szDir[dwLen-1] == '\\')
					break;
				szDir[dwLen-1] = '\0';
				dwLen--;
			}

			CString strCrashDir = szDir;
			if(strCrashDir.Right(1) != _T("\\"))
				strCrashDir += _T("\\");
			//strCrashDir += GIE_DUMP_FILE_PATH;

			char DumpPath[MAX_PATH] = { 0 }; 
			SYSTEMTIME SystemTime; 
			//获取当前时间
			GetLocalTime(&SystemTime) ;
			//以当前时间为基准，创建DUMP文件

			sprintf_s( DumpPath, "%s%.4d-%.2d-%.2d %.2d_%.2d_%.2d.dmp",
				strCrashDir,
				SystemTime .wYear , 
				SystemTime .wMonth, 
				SystemTime .wDay, 
				SystemTime .wHour, 
				SystemTime .wMinute, 
				SystemTime .wSecond );

			//如果目录不存在则先创建目录
			if (_access(strCrashDir, 0) == -1)
			{
				if (_mkdir(strCrashDir) != 0)
				{
					return -1;
				}
			}

			//创建文件
			HANDLE FileHandle = CreateFileA( 
				DumpPath, 
				GENERIC_WRITE, 
				FILE_SHARE_WRITE, 
				NULL, CREATE_ALWAYS, 
				FILE_ATTRIBUTE_NORMAL, 
				NULL );

			//文件创建成功的时候
			if (FileHandle != INVALID_HANDLE_VALUE) 
			{ 
				_MINIDUMP_EXCEPTION_INFORMATION MiniDumpExceptionInfo; 

				//保存MiniDump异常信息的结构体
				MiniDumpExceptionInfo.ThreadId = GetCurrentThreadId() ; 
				MiniDumpExceptionInfo.ExceptionPointers = exceptionInfo; 

				MiniDumpExceptionInfo.ClientPointers = NULL;

				//运行当前Process的Dump
				//这里的Dump利用的是上面DBGHELP.DLL中打开的文件
				//通过它创建Dump文件
				BOOL Success = Dump( 
					GetCurrentProcess() , 
					GetCurrentProcessId() , 
					FileHandle, //事先生成的文件句柄值
					MiniDumpNormal, 
					&MiniDumpExceptionInfo, //异常信息
					NULL, 
					NULL ) ; 

				if( Success ) 
				{
					//成功的时候
					CloseHandle(FileHandle) ; 
					return EXCEPTION_EXECUTE_HANDLER; 
				} 
			} 

			CloseHandle(FileHandle) ; 
		} 
	} 

	return EXCEPTION_CONTINUE_SEARCH; 
}

//END_WARECOMMON
